name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECRET_KEY_HASHED_PASS: ${{ secrets.SECRET_KEY_HASHED_PASS }}
      BACKEND_URL: ${{ secrets.BACKEND_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase repository owner
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests with pytest
        run: |
          cd backend
          pytest tests --maxfail=2 --disable-warnings -q --cov=./ --cov-report=xml
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY_HASHED_PASS: ${{ secrets.SECRET_KEY_HASHED_PASS }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend container
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/backend:${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SECRET_KEY_HASHED_PASS=${{ secrets.SECRET_KEY_HASHED_PASS }}
            BACKEND_URL=${{ secrets.BACKEND_URL }}

      - name: Build and push frontend container
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/frontend:${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push nginx container
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/nginx:${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER }}/nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Run container smoke tests
      #   run: |
      #     export COMPOSE_PROJECT_NAME=to_do_list
      #     export DATABASE_URL=${{ secrets.DATABASE_URL }}
      #     export SECRET_KEY_HASHED_PASS=${{ secrets.SECRET_KEY_HASHED_PASS }}
      #     export BACKEND_URL=${{ secrets.BACKEND_URL }}
      #     docker compose -f docker-compose.yml up -d
      #     sleep 10
      #     curl -f http://localhost || (echo "Backend not responding" && exit 1)
      #     curl -f http://localhost/api/health || (echo "Health check failed" && exit 1)
      #     docker compose -f docker-compose.yml down

      - name: Trigger Render deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys